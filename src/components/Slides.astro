---
/* pressing down, space, up, j, k, or f, should start present. Scrolling should disable it. */
import { Typst } from "astro-typst/src/components";
import Layout from "../layouts/Layout.astro";
import fs from "node:fs";
import Header from "./Header.astro";

interface Params {
    filePath: string;
}
const { filePath } = Astro.props;
const code = fs.readFileSync(filePath, "utf-8");
// const scrollSlides = slideContent.replace("handout: false", "handout: true");
// const presentSlides = slideContent.replace("handout: true", "handout: false");
---

<div>
    <Header />
    <div class="slides-container">
        <Typst {code} remPx={10} props={{ width: "100%", height: "100%" }} />
    </div>
</div>

<style is:global>
    body {
        margin: 0;
    }
    .slides-container.present {
        text-align: center;
        width: 95%;
        height: 100vh;
        margin: auto;
        overflow: hidden;
    }
    svg.typst-doc {
        margin: auto;
    }
    .present header,
    .present footer {
        display: none;
    }

    g .present .typst-page {
        transform: translate(0, 0);
        display: flex;
        margin: auto 0;
    }

    .present.typst-doc {
        margin: auto 0;
        height: 100vh;
    }
</style>

<script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
        // page number and typst slides
        let pageNumber = 0; // Default page number (0-based index)
        const typstPages = Array.from(document.querySelectorAll(".typst-page"));
        const typstDoc = document.querySelector(".typst-doc");
        const clientHeight = typstDoc.clientHeight;
        const clientWidth = typstDoc.clientWidth;
        const pageHeight = typstPages[0].getAttribute("data-page-height");
        const docWidth = typstDoc.getAttribute("data-width");
        const docHeight = typstDoc.getAttribute("data-height");

        // keydown event listener
        document.addEventListener("keydown", function (e) {
            if (e.key === "f") {
                togglePresentation();
            }
            if (e.key === "k" && document.body.classList.contains("present")) {
                pageNumber = Math.max(0, pageNumber - 1);
                showPage(pageNumber);
            } else if (
                e.key === "j" &&
                document.body.classList.contains("present")
            ) {
                pageNumber = Math.min(typstPages.length - 1, pageNumber + 1);
                showPage(pageNumber);
            }
        });

        function togglePresentation() {
            document.body.classList.toggle("present");
            const isPresent = document.body.classList.contains("present");
            document
                .querySelector(".slides-container")
                .classList.toggle("present");
            document.querySelector(".typst-doc").classList.toggle("present");
            window.scrollTo(0, 0);
            typstDoc.setAttribute(
                "data-height",
                isPresent ? pageHeight : docHeight,
            );
            typstDoc.setAttribute(
                "viewBox",
                `0 0 ${docWidth} ${isPresent ? pageHeight : docHeight}`,
            );
            typstPages.forEach((page, index) => {
                page.classList.toggle("present");
                page.setAttribute(
                    "transform",
                    `translate(0, ${isPresent ? 0 : index * page.getAttribute("data-page-height")})`,
                );
                if (
                    index == pageNumber &&
                    document.body.classList.contains("present")
                ) {
                    window.scrollTo(0, 0);
                    page.style.display = "";
                } else if (document.body.classList.contains("present")) {
                    page.style.display = "none";
                } else {
                    page.style.display = "";
                    page.setAttribute(
                        "transform",
                        `translate(0, ${index * page.getAttribute("data-page-height")})`,
                    );
                }
            });
        }

        function showPage(pageNumber) {
            typstPages.forEach((p, i) => {
                p.style.display = i === pageNumber ? "" : "none";
            });
        }
    });

    /**
  Copyright 2025 Myriad-Dreamin

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
    function findAncestor(el, cls) {
        while ((el = el.parentElement) && !el.classList.contains(cls));
        return el;
    }

    window.handleTypstLocation = function (elem, page, x, y) {
        const docRoot = findAncestor(elem, "typst-doc");
        const children = docRoot.children;
        let nthPage = 0;
        for (let i = 0; i < children.length; i++) {
            if (children[i].tagName === "g") {
                nthPage++;
            }
            if (nthPage == page) {
                const page = children[i];
                const dataWidth = page.getAttribute("data-page-width");
                const dataHeight = page.getAttribute("data-page-height");
                const rect = page.getBoundingClientRect();
                const xOffsetInner =
                    Math.max(0, x / dataWidth - 0.05) * rect.width;
                const yOffsetInner =
                    Math.max(0, y / dataHeight - 0.05) * rect.height;
                const xOffsetInnerFix =
                    (x / dataWidth) * rect.width - xOffsetInner;
                const yOffsetInnerFix =
                    (y / dataHeight) * rect.height - yOffsetInner;

                const docRoot = document.body || document.firstElementChild;
                const basePos = docRoot.getBoundingClientRect();

                const xOffset = rect.left - basePos.left + xOffsetInner;
                const yOffset = rect.top - basePos.top + yOffsetInner;
                const left = xOffset + xOffsetInnerFix;
                const top = yOffset + yOffsetInnerFix;

                console.log("scrolling to", xOffset, yOffset, left, top);

                window.scrollTo(xOffset, yOffset);
                const ripple = document.createElement("div");
                ripple.className = "typst-ripple";
                docRoot.appendChild(ripple);

                ripple.style.left = left.toString() + "px";
                ripple.style.top = top.toString() + "px";

                ripple.style.animation = "typst-ripple-effect .4s linear";
                ripple.onanimationend = () => {
                    docRoot.removeChild(ripple);
                };
                return;
            }
        }
    };
</script>
