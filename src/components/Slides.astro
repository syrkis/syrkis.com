---
/* pressing down, space, up, j, k, or f, should start presentation mode. Scrolling should disable it. */
import { Typst } from "astro-typst/src/components";
import Layout from "../layouts/Layout.astro";
import fs from "node:fs";
import Header from "./Header.astro";

interface Params {
    filePath: string;
}
const { filePath } = Astro.props;
const slideContent = fs.readFileSync(filePath, "utf-8");
const scrollSlides = slideContent.replace("handout: false", "handout: true");
const presentSlides = slideContent.replace("handout: true", "handout: false");
let showPresentationMode = true;
---

<div class="slides-container">
    <Header />
    <Typst
        code={showPresentationMode ? presentSlides : scrollSlides}
        remPx={10}
        props={{ width: "100%", height: "100%" }}
    />
</div>

<style is:global>
    /* @media (prefers-color-scheme: dark) { */
    /* svg { */
    /* filter: invert(1); */
    /* } */
    /* body { */
    /* color: white; */
    /* background: black; */
    /* } */
    /* } */
    /* @media (orientation: landscape) {
        .header {
            display: none;
        }
    } */
    .slides-container {
        text-align: center;
        width: 95%;
        margin: 0 auto;
    }
    .typst-doc {
        margin: auto 0;
    }
    body.slides-active {
        overflow: hidden;
    }
    .slides-container.slides-active {
        overflow: hidden;
        height: 100vh;
    }
</style>

<script is:inline>
    const showPresentationMode = window.matchMedia(
        "(orientation: portrait)",
    ).matches;
    document.addEventListener("DOMContentLoaded", () => {
        const isWiderThanTall = window.innerWidth > window.innerHeight;

        if (isWiderThanTall) {
            // Hide header and footer when this component is active
            const header = document.querySelector("header");
            const footer = document.querySelector("footer");

            if (header) header.style.display = "none";
            if (footer) footer.style.display = "none";
            let pageNumber = 0; // Default page number (0-based index)

            const typstPages = document.querySelectorAll(".typst-page");
            const typstPagesArray = Array.from(typstPages);
            const typstDoc = document.querySelector(".typst-doc");
            const slidesContainer = document.querySelector(".slides-container");

            typstDoc.setAttribute("height", "100vh");

            function showPage(pageNumber) {
                typstPagesArray.forEach((page, index) => {
                    if (index === pageNumber) {
                        page.style.display = "block";
                        page.setAttribute("transform", "translate(0, 0)");
                        const pageWidth = page.getAttribute("data-page-width");
                        const pageHeight =
                            page.getAttribute("data-page-height");
                        typstDoc.setAttribute(
                            "viewBox",
                            `0 0 ${pageWidth} ${pageHeight}`,
                        );
                    } else {
                        page.style.display = "none";
                        page.setAttribute("transform", "translate(0, -10000)");
                    }
                });
            }

            showPage(pageNumber); // Show the default page

            console.log(
                `Number of typst-page instances: ${typstPagesArray.length}`,
            );
            console.log(typstPagesArray);

            // Add a class to the body and slides-container to indicate the component is active
            document.body.classList.add("slides-active");
            slidesContainer.classList.add("slides-active");

            // Add event listener for keydown events
            document.addEventListener("keydown", (event) => {
                if (
                    event.key === "ArrowRight" ||
                    event.key === "ArrowDown" ||
                    event.key === "j" ||
                    event.key === " " // Space key
                ) {
                    // Go to the next slide
                    if (pageNumber < typstPagesArray.length - 1) {
                        pageNumber++;
                        showPage(pageNumber);
                    }
                } else if (
                    event.key === "ArrowLeft" ||
                    event.key === "ArrowUp" ||
                    event.key === "k" ||
                    (event.key === " " && event.shiftKey) // Shift + Space key
                ) {
                    // Go to the previous slide
                    if (pageNumber > 0) {
                        pageNumber--;
                        showPage(pageNumber);
                    }
                }
            });

            // Clean up when the component is no longer active
            window.addEventListener("beforeunload", () => {
                if (header) header.style.display = "";
                if (footer) footer.style.display = "";
                document.body.classList.remove("slides-active");
                slidesContainer.classList.remove("slides-active");
            });
        }
    });

    /**
    Copyright 2025 Myriad-Dreamin

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    function findAncestor(el, cls) {
        while ((el = el.parentElement) && !el.classList.contains(cls));
        return el;
    }

    window.handleTypstLocation = function (elem, page, x, y) {
        const docRoot = findAncestor(elem, "typst-doc");
        const children = docRoot.children;
        let nthPage = 0;
        for (let i = 0; i < children.length; i++) {
            if (children[i].tagName === "g") {
                nthPage++;
            }
            if (nthPage == page) {
                const page = children[i];
                const dataWidth = page.getAttribute("data-page-width");
                const dataHeight = page.getAttribute("data-page-height");
                const rect = page.getBoundingClientRect();
                const xOffsetInner =
                    Math.max(0, x / dataWidth - 0.05) * rect.width;
                const yOffsetInner =
                    Math.max(0, y / dataHeight - 0.05) * rect.height;
                const xOffsetInnerFix =
                    (x / dataWidth) * rect.width - xOffsetInner;
                const yOffsetInnerFix =
                    (y / dataHeight) * rect.height - yOffsetInner;

                const docRoot = document.body || document.firstElementChild;
                const basePos = docRoot.getBoundingClientRect();

                const xOffset = rect.left - basePos.left + xOffsetInner;
                const yOffset = rect.top - basePos.top + yOffsetInner;
                const left = xOffset + xOffsetInnerFix;
                const top = yOffset + yOffsetInnerFix;

                console.log("scrolling to", xOffset, yOffset, left, top);

                window.scrollTo(xOffset, yOffset);
                const ripple = document.createElement("div");
                ripple.className = "typst-ripple";
                docRoot.appendChild(ripple);

                ripple.style.left = left.toString() + "px";
                ripple.style.top = top.toString() + "px";

                ripple.style.animation = "typst-ripple-effect .4s linear";
                ripple.onanimationend = () => {
                    docRoot.removeChild(ripple);
                };
                return;
            }
        }
    };
</script>
